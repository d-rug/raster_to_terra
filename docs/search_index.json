[["index.html", "Raster to Terra Overview 0.1 Learning Goals 0.2 Prerequisites 0.3 What we will cover", " Raster to Terra Elise Hellwig 2023-10-04 Overview No one wants to relearn something they already know how to do. But sometimes there’s no other choice. The sp, rgdal, rgeos, and maptools packages will be gone by the end of 2023. The raster package is not long for this world either. sf is nice, but it doesn’t have the raster functionality necessary for many types of analysis. This workshop aims to make the transition from raster to terra as painless as possible. Each of this workshop will have a conversion table. This table will tell you which terra function to use, given an operation and data type. It will also provide the functions from raster, sp, rgdal, and rgeos that used to accomplish that operation. 0.1 Learning Goals Get a sense for the functionality of the terra package as a whole Be able to translate existing code from deprecated packages to terra syntax Know where to find more information about terra. This presentation will NOT give you a comprehensive discussion of terra. It is too short for that. However, it will provide links to places you can find more documentation. 0.2 Prerequisites Familiarity with the raster and sp packages 0.3 What we will cover read/write transformations joining calculations get coordinates for spatVector sampling transformation Plotting interpolation data access "],["terra-a-birds-eye-view.html", "1 terra: a bird’s eye view", " 1 terra: a bird’s eye view The last spatial package you’ll ever need* Rasters and Vectors, with united functions where possible One task, one function Improved speed Very large: 345 functions; raster has 277, sf has 150 Some things changed, many stayed the same Old Packages: sp, raster, rgdal, rgeos, maptools New Packages: terra and geodata (for data) library(microbenchmark) # for speed testing #new packages library(terra) library(geodata) #old packages library(raster) library(rgdal) #table formatting library(data.table) library(kableExtra) library(scales) options(warn=-1) elev_fn = system.file(&quot;ex/elev.tif&quot;, package=&quot;terra&quot;) lux_fn = system.file(&quot;ex/lux.shp&quot;, package=&quot;terra&quot;) elev = rast(elev_fn) r_elev = raster(elev) lux = vect(lux_fn) sp_lux = shapefile(lux_fn) "],["the-basics.html", "2 The basics 2.1 Reading in data 2.2 Writing data", " 2 The basics 2.1 Reading in data Reading and writing data functionality is based on GDAL, so you will have all the flexibility in your choice of file type that GDAL provides. Operation Data Type Old Functions New Functions read data raster raster, stack, brick rast read data vector shapefile, rgdal::readOGR vect write data raster writeRaster writeRaster write data vector shapefile, rgdal::writeOGR writeVector # reading data readbench = microbenchmark( rast(elev_fn), raster(elev_fn), vect(lux_fn), shapefile(lux_fn), readOGR(lux_fn, verbose = FALSE), times = n_reps ) read_names = c(&#39;terra::rast&#39;, &#39;raster::raster&#39;, &#39;terra::vect&#39;, &#39;raster::shapefile&#39;, &#39;rgdal::readOGR&#39;) readtab = microbench_df(readbench, read_names) readtab %&gt;% kbl(align=&#39;lrr&#39;) %&gt;% kable_styling() function median (microsec) n_eval terra::rast 7.83 10 raster::raster 71.10 10 terra::vect 10.07 10 raster::shapefile 114.49 10 rgdal::readOGR 3,620.06 10 2.2 Writing data The function writeRaster() is relatively unchanged, though the argument specifying the type of file written has changed from format (in raster) to filetype (in terra). Additionally, while in theory the function can automatically detect the file type, it seems to rarely work, so it is better to just specify filetype from the get-go. With spatVectors we get writeVector(), which largely mirrors writeRaster(). # writing data writebench = microbenchmark( terra::writeRaster(elev, filename=&#39;data/elevation.GTiff&#39;, filetype=&#39;GTiff&#39;, overwrite=TRUE), raster::writeRaster(r_elev, filename=&#39;data/elevation.GTiff&#39;, format=&#39;GTiff&#39;, overwrite=TRUE), writeVector(lux, filename=&#39;data/lux.shp&#39;, overwrite=TRUE), shapefile(sp_lux, filename=&#39;data/lux.shp&#39;, overwrite=TRUE), writeOGR(sp_lux, dsn=&#39;data/lux.shp&#39;, layer=&#39;lux&#39;, driver=&#39;ESRI Shapefile&#39;, overwrite_layer=TRUE, verbose=FALSE), times = n_reps ) ## rgeos version: 0.6-4, (SVN revision 699) ## GEOS runtime version: 3.11.0-CAPI-1.17.0 ## Please note that rgeos will be retired during October 2023, ## plan transition to sf or terra functions using GEOS at your earliest convenience. ## See https://r-spatial.org/r/2023/05/15/evolution4.html for details. ## GEOS using OverlayNG ## Linking to sp version: 2.0-0 ## Polygon checking: TRUE write_names = c(&#39;terra::writeRaster&#39;, &#39;raster::writeRaster&#39;, &#39;terra::writeVector&#39;, &#39;raster::shapefile&#39;, &#39;rgdal::writeOGR&#39;) write_tab = microbench_df(writebench, write_names) write_tab %&gt;% kbl(align=&#39;lrr&#39;) %&gt;% kable_styling() function median (microsec) n_eval terra::writeRaster 25.33 10 raster::writeRaster 261.96 10 terra::writeVector 9.55 10 raster::shapefile 35.20 10 rgdal::writeOGR 28.17 10 microbenchmark( writeVector(lux, filename=&#39;data/lux.shp&#39;, overwrite=TRUE), shapefile(sp_lux, filename=&#39;data/lux.shp&#39;, overwrite=TRUE), times = 100 ) ## Unit: microseconds ## expr min ## writeVector(lux, filename = &quot;data/lux.shp&quot;, overwrite = TRUE) 850.094 ## shapefile(sp_lux, filename = &quot;data/lux.shp&quot;, overwrite = TRUE) 3221.001 ## lq mean median uq max neval ## 921.7005 1014.058 969.0145 1075.122 1470.998 100 ## 3460.0515 3802.876 3685.3465 3914.332 9076.785 100 "],["transform.html", "3 Transform", " 3 Transform Operation Data Type Old Functions New Functions add projection all crs(x) &lt;- crs(x) &lt;- change projection raster projectRaster project change projection vector sp::spTransform project change resolution/origin raster resample, aggregate, disaggregate resample, aggregate, disagg spatial subset all crop, intersect, mask crop, intersect, mask Most of the methods for transforming spatial data remain the same from raster. The exception to that is raster::projectRaster(), which now becomes terra::project() and now works for both rasters and vectors. microbenchmark( terra::project(elev, &quot;epsg:3310&quot;), raster::projectRaster(r_elev, crs=&quot;epsg:3310&quot;), times=10 ) ## Unit: milliseconds ## expr min lq mean ## terra::project(elev, &quot;epsg:3310&quot;) 41.21808 43.24053 50.71560 ## raster::projectRaster(r_elev, crs = &quot;epsg:3310&quot;) 50.41475 54.81917 71.60935 ## median uq max neval ## 45.06128 52.20760 87.42258 10 ## 56.96550 61.36704 149.21064 10 "],["calculate.html", "4 Calculate 4.1 Summary 4.2 Conversion Table", " 4 Calculate 4.1 Summary One of raster’s claims to fame was the ease at which you could do calculations. R automatically treated each cell in a RasterLayer as if it was a number, and each cell in a RasterBrick or RasterStack as if it were a vector. There are additional functions for doing calculations on an entire layer of a raster and for applying non-vectorized functions. 4.2 Conversion Table Operation Data Type Old Functions New Functions raster arithmetic raster +, -, *, / etc. +, -, *, / etc. apply pre-vectorized function on each cell of a raster raster sum, mean, max, etc. sum, mean, max etc. apply functions on a moving window raster focal focal apply functions to layers in a raster raster cellStats global apply functions to the values of each cell of a raster raster calc app apply functions using layers as arguments raster calc lapp area covered all area, rgeos::gArea expanse area of raster cell raster area cellSize "],["combine.html", "5 Combine 5.1 Querying", " 5 Combine 5.1 Querying Similar to "],["extents.html", "6 Extents", " 6 Extents "],["what-about-sf-and-stars.html", "7 What about sf (and stars)?", " 7 What about sf (and stars)? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
