[["index.html", "Raster to Terra Overview 0.1 Learning Goals 0.2 Prerequisites 0.3 What we will cover", " Raster to Terra Elise Hellwig 2023-09-26 Overview No one wants to relearn something they already know how to do. But sometimes there’s no other choice. The sp, rgdal, rgeos, and maptools packages will be gone by the end of 2023. The raster package is not long for this world either. sf is nice, but it doesn’t have the raster functionality necessary for many types of analysis. This workshop aims to make the transition from raster to terra as painless as possible. 0.1 Learning Goals Get a sense for the functionality of the terra package as a whole Be able to translate existing code from deprecated packages to terra syntax Know where to find more information about terra. This presentation will NOT give you a comprehensive discussion of terra. It is too short for that. However, it will provide links to places you can find more documentation. 0.2 Prerequisites Familiarity with the raster and sp packages 0.3 What we will cover read/write transformations joining calculations get coordinates for spatVector sampling transformation Plotting interpolation data access "],["terra-a-birds-eye-view.html", "1 terra: a bird’s eye view", " 1 terra: a bird’s eye view The last spatial package you’ll ever need* Rasters and Vectors, with united functions where possible One task, one function Improved speed Very large: 345 functions; raster has 277, sf has 150 Some things changed, many stayed the same Old Packages: sp, raster, rgdal, rgeos, maptools New Packages: terra and geodata (for data) library(microbenchmark) # for speed testing #new packages library(terra) library(geodata) #old packages library(raster) library(rgdal) #table formatting library(data.table) library(kableExtra) options(warn=-1) funs = fread(&#39;data/raster_to_terra_funs.csv&#39;) vars = c(&#39;DataType&#39;, &#39;Operation&#39;, &#39;old&#39;, &#39;terra&#39;) elev_fn = system.file(&quot;ex/elev.tif&quot;, package=&quot;terra&quot;) lux_fn = system.file(&quot;ex/lux.shp&quot;, package=&quot;terra&quot;) elev = rast(elev_fn) r_elev = raster(elev) lux = vect(lux_fn) sp_lux = shapefile(lux_fn) "],["the-basics.html", "2 The basics 2.1 Reading in data 2.2 Writing data", " 2 The basics 2.1 Reading in data Reading and writing data functionality is based on GDAL, so you will have all the flexibility in your choice of file type that GDAL provides. DataType Operation old terra raster read data raster, stack, brick rast vector read data shapefile, rgdal::readOGR vect raster write data writeRaster writeRaster vector write data shapefile, rgdal::writeOGR writeVector # reading raster data microbenchmark( rast(elev_fn), raster(elev_fn), times = 100 ) ## Unit: microseconds ## expr min lq mean median uq max ## rast(elev_fn) 636.771 660.8995 733.0566 698.1685 715.819 4547.679 ## raster(elev_fn) 6466.192 6560.4100 6965.5248 6608.6260 6715.083 21746.564 ## neval ## 100 ## 100 #reading vector data microbenchmark( vect(lux_fn), shapefile(lux_fn), readOGR(lux_fn), times=100 ) 2.2 Writing data The function writeRaster() is relatively unchanged, though the argument specifying the type of file written has changed from format (in raster) to filetype (in terra). Additionally, while in theory the function can automatically detect the file type, it seems to rarely work, so it is better to just specify filetype from the get-go. microbenchmark( terra::writeRaster(elev, filename=&#39;data/elevation.GTiff&#39;, filetype=&#39;GTiff&#39;, overwrite=TRUE), raster::writeRaster(r_elev, filename=&#39;data/elevation.GTiff&#39;, format=&#39;GTiff&#39;, overwrite=TRUE), times = 100 ) ## Unit: milliseconds ## expr ## terra::writeRaster(elev, filename = &quot;data/elevation.GTiff&quot;, filetype = &quot;GTiff&quot;, overwrite = TRUE) ## raster::writeRaster(r_elev, filename = &quot;data/elevation.GTiff&quot;, format = &quot;GTiff&quot;, overwrite = TRUE) ## min lq mean median uq max neval ## 2.276853 2.354056 2.690137 2.46166 2.534497 8.796632 100 ## 24.249286 24.731692 27.614151 25.11330 29.040628 60.784345 100 With spatVectors we get writeVector(), which largely mirrors writeRaster(). microbenchmark( writeVector(lux, filename=&#39;data/lux.shp&#39;, filetype=&#39;ESRI Shapefile&#39;, overwrite=TRUE), shapefile(sp_lux, filename=&#39;data/lux.shp&#39;, filetype=&#39;ESRI Shapefile&#39;, overwrite=TRUE), times = 100 ) ## Unit: microseconds ## expr ## writeVector(lux, filename = &quot;data/lux.shp&quot;, filetype = &quot;ESRI Shapefile&quot;, overwrite = TRUE) ## shapefile(sp_lux, filename = &quot;data/lux.shp&quot;, filetype = &quot;ESRI Shapefile&quot;, overwrite = TRUE) ## min lq mean median uq max neval ## 841.525 892.406 961.7493 921.4955 987.4235 1323.07 100 ## 3127.152 3333.833 3785.8100 3480.7155 3661.4025 17811.96 100 "],["transform.html", "3 Transform", " 3 Transform Most of the methods for transforming spatial data remain the same from raster. The exception to that is raster::projectRaster(), which now becomes terra::project() and now works for both rasters and vectors. microbenchmark( terra::project(elev, &quot;epsg:3310&quot;), raster::projectRaster(r_elev, crs=&quot;epsg:3310&quot;), times=10 ) ## Unit: milliseconds ## expr min lq mean ## terra::project(elev, &quot;epsg:3310&quot;) 42.47698 44.87852 48.63222 ## raster::projectRaster(r_elev, crs = &quot;epsg:3310&quot;) 50.81626 54.40495 76.83586 ## median uq max neval ## 45.04941 45.28376 77.3996 10 ## 55.98021 108.83372 155.2551 10 "],["combine.html", "4 Combine 4.1 Querying", " 4 Combine 4.1 Querying Similar to "],["calculate.html", "5 Calculate", " 5 Calculate "],["extents.html", "6 Extents", " 6 Extents "],["what-about-sf-and-stars.html", "7 What about sf (and stars)?", " 7 What about sf (and stars)? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
