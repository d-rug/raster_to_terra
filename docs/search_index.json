[["index.html", "Raster to Terra Overview 0.1 Learning Goals 0.2 Prerequisites 0.3 What we will cover", " Raster to Terra Elise Hellwig 2023-12-20 Overview No one wants to relearn something they already know how to do. But sometimes there’s no other choice. The rgdal, rgeos, and maptools packages have been officially retired, and sp is only available for legacy reasons as a wrapper around sf. The raster package is not long for this world either. sf is nice, but it doesn’t have the raster functionality necessary for many types of analysis. This reader aims to make the transition from raster to terra as painless as possible. Each section of this reader will have a conversion table. The conversion table will tell you which terra function to use, given an operation and data type. It will also provide the functions from raster, sp, rgdal, and rgeos that used to accomplish that operation. 0.1 Learning Goals Get a sense for the functionality of the terra package as a whole Be able to translate existing code from deprecated packages to terra syntax Know where to find more information about terra. This reader will NOT give you a comprehensive discussion of terra. It is too short for that. However, it will provide links to places you can find more documentation. 0.2 Prerequisites Familiarity with the raster and sp packages 0.3 What we will cover Package overview New classes Object creation Method name changes Spatial relationships Calculations Plotting What’s not in terra Functionality changes "],["terra-a-birds-eye-view.html", "1 terra: a bird’s eye view 1.1 Setup", " 1 terra: a bird’s eye view Raster AND vector support Fewer classes, more functionality One task, one function Written in C++ for improved speed Very large: 345 functions; raster has 277, sf has 150 Some things changed, many stayed the same The terra package looks like what would happen if the authors of raster got frustrated with maintaining a package whose scope had ballooned massively over its 10+ year history, and decided to start from scratch to create a newer, better geospatial package. Because that is in fact what happened. Old Packages: sp, raster, rgdal, rgeos, maptools New Packages: terra and geodata (for data) 1.1 Setup library(microbenchmark) # for speed testing #new packages library(terra) library(geodata) library(sf) #old packages library(raster) library(rgdal) #table formatting library(data.table) library(kableExtra) library(scales) options(warn=-1) elev_fn = system.file(&quot;ex/elev.tif&quot;, package=&quot;terra&quot;) lux_fn = system.file(&quot;ex/lux.shp&quot;, package=&quot;terra&quot;) elev = rast(elev_fn) r_elev = raster(elev) lux = vect(lux_fn) sp_lux = shapefile(lux_fn) "],["the-basics.html", "2 The Basics 2.1 Classes 2.2 Reading in data 2.3 Writing data", " 2 The Basics 2.1 Classes The terra package condenses the number of classes necessary for analysis from 10 down to 3: one for rasters, one for vectors, and one for extents. 2.2 Reading in data The spatRaster constructor method, rast(), is significantly changed from raster, at least in part because it is a combination of three previous functions (raster(), brick() and stack()). Most of the existing arguments are renamed, and some new ones added, including the ability to specify a timestamp and units for each layer. Both rast() and vect() provide data filtering built in. They both provide layer selection and spatial filtering and vect() allows SQL queries as well. Terra speeds up reading in both raster an vector data. This is due to C++ implementation of the classes, which imposes some limitations. Most significantly for reading in data, spatRasters and spatVectors cannnot be recovered from a saved R session. However, using saved R sessions is not a good (reproducible) practice anyway, so consider this a feature not a bug. Reading and writing data functionality is still based on GDAL, so you will have all the flexibility in your choice of file type that GDAL provides, but will have to deal with the issues that using GDAL generates. function median (millisec) n_eval terra::rast() 1.20 10 raster::raster() 6.55 10 terra::vect() 1.31 10 sf::st_read() 1.29 10 raster::shapefile() 16.10 10 rgdal::readOGR() 842.10 10 2.3 Writing data The function writeRaster() is relatively unchanged, though the argument specifying the type of file written has changed from format (in raster) to filetype (in terra). Additionally, while in theory the function can automatically detect the file type, it seems to rarely work, so it is better to just specify filetype from the get-go. For spatVectors we get writeVector(), which largely mirrors writeRaster(). function median (millisec) n_eval terra::writeRaster 3.38 10 raster::writeRaster 30.22 10 terra::writeVector 1.30 10 sf::st_write 8.10 10 raster::shapefile 4.46 10 rgdal::writeOGR 3.58 10 "],["working-with-data.html", "3 Working with Data 3.1 Speed Improvements 3.2 Spatial Relationships", " 3 Working with Data In general, method names got shorter and more similar to base R. Additionally, most capitals were removed. coordinates \\(\\rightarrow\\) crds nlayers \\(\\rightarrow\\) nlyr getValues \\(\\rightarrow\\) values stack, addLayer \\(\\rightarrow\\) c unstack \\(\\rightarrow\\) as.list dropLayer \\(\\rightarrow\\) subset rasterTo* \\(\\rightarrow\\) as.* isLonLat \\(\\rightarrow\\) is.lonlat bind \\(\\rightarrow\\) rbind Additionally, many tasks that previously at separate methods for raster and vector data, are now combined into one method. Functions in green rows have been renamed, while functions in grey rows, maintain their name from raster. Operation Old Methods New Method reproject projectRaster, sp::spTransform project combine cells/polygons aggregate aggregate split cells/polygons disaggregate disagg spatial query sp::over extract spatial sampling sp::spsample, sampleRandom spatSample 3.1 Speed Improvements Many of the most time-intensive operations got speed boosts from the C++ implementation. function median (millisec) n_eval terra::spatSample 2.20 10 raster::sampleRandom 6.83 10 terra::project 35.05 10 raster::projectRaster 60.85 10 terra::resample 1.83 10 raster::resample 49.53 10 terra::rasterize 1.83 10 raster::rasterize 233.25 10 terra::as.polygons 27.97 10 raster::rasterToPolygons 187.75 10 3.2 Spatial Relationships Instead of having the name of the spatial relation function depend on the type of spatial relationship, in terra, the number of objects compared determines the function used. For one-to-one and one-to-many comparisons use is.related(), for many-to-many comparisons, use relate(). The relation argument specifies relationship type. Options include intersects, touches, crosses, overlaps, within, contains, covers, covered by, disjoint, or DE-9IM string The spatial operations below remain unchanged: union() intersect() symdif() buffer() crop() cover() "],["calculations.html", "4 Calculations", " 4 Calculations One of raster’s claims to fame was the ease at which you could do calculations. R automatically treated each cell in a RasterLayer as if it was a number, and each cell in a RasterBrick or RasterStack as if it were a vector. There were additional functions for doing calculations on an entire layer of a raster and for applying non-vectorized functions. That all remains true with terra, and "],["plotting.html", "5 Plotting", " 5 Plotting "],["wheres-the-data-geodata.html", "6 Where’s the data? geodata!", " 6 Where’s the data? geodata! Another one of raster’s more useful features was getData(), a function that automated data downloading for a variety of online data sources. Unfortunately, getData() was poorly documented, to the point where using it required ___. In particular, because there was only one function for all of the data sources, it was always a guessing game as to which arguments were required for which data sources. It wasn’t even that easy to find a list of data sources available. It was not particularly well publicized either, to the point where people who used raster for years, did not know it existed. These problems have now been solved by migrating the functionality of getData to its own package: geodata. Each data source (listed below) has one or more functions that are each well documented. Climate and land cover Elevation and soils Crop distribution and yields Political boundaries Population and human footprint Open Street Map Species occurrence Marine data "],["what-about-sf-and-stars.html", "7 What about sf (and stars)?", " 7 What about sf (and stars)? The sf package is the preeminent package for working with vector data in R. It plays nicely with the tidyverse packages, and has built-in ggplot2 support. The vector support in terra doesn’t change that. What it means is that if you work with raster data, you do not need to add an entire package to your workflow, just because you want to create a mask for one of your output maps. Furthermore, transitioning data types between the two packages is relatively easy: terra to sf: st_to_sf() sf to terra: vect() Terra functions tend to have speed benefits over sf functions, but not to the point where you would notice outside of very large data sets. There is also a package called tidyterra, if you like terra but still want to use some of the tidyverse methods or ggplot2 for plotting. Stars is the tidyverse version of the terra package. In general, it is not as well documented and treats ____. This means you lose out on a lot of the vectorization from terra. Additionally, stars does not automatically deal with data sets that are too large to to be read into memory. You have to know that your data set is too big and then make changes to your code detailedchere. There is a comparison between the two paradigms here, but unfortunately it uses raster instead of terra so a lot of the method names are wrong or missing. "],["resources.html", "8 Resources 8.1 Practice!", " 8 Resources For more in depth terra documentation, please see the resources below. Spatial Data with terra on rspatial.org - How to do spatial data analysis in the context of R and the terra package. terra documentation on rspatial.org - A vignette that walks you through the terra package. terra documentation on github - An overview of terra and a comprehensive description of its classes and methods. Highlights [differences][terra_diff] between raster and terra. geodata documentation on github - A description of available data as well as some links to the original source. 8.1 Practice! If you still feel a bit unsure about translating your own code from raster to terra syntax, you can test your skills using this raster practice script. A successfully transitioned terra script is also available on the github repo. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
