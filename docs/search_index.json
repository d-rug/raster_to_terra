[["index.html", "Raster to Terra Overview 0.1 Learning Goals 0.2 Prerequisites 0.3 What we will cover", " Raster to Terra Elise Hellwig 2023-09-29 Overview No one wants to relearn something they already know how to do. But sometimes there’s no other choice. The sp, rgdal, rgeos, and maptools packages will be gone by the end of 2023. The raster package is not long for this world either. sf is nice, but it doesn’t have the raster functionality necessary for many types of analysis. This workshop aims to make the transition from raster to terra as painless as possible. Each of this workshop will have a conversion table. This table will tell you which terra function to use, given an operation and data type. It will also provide the functions from raster, sp, rgdal, and rgeos that used to accomplish that operation. 0.1 Learning Goals Get a sense for the functionality of the terra package as a whole Be able to translate existing code from deprecated packages to terra syntax Know where to find more information about terra. This presentation will NOT give you a comprehensive discussion of terra. It is too short for that. However, it will provide links to places you can find more documentation. 0.2 Prerequisites Familiarity with the raster and sp packages 0.3 What we will cover read/write transformations joining calculations get coordinates for spatVector sampling transformation Plotting interpolation data access "],["terra-a-birds-eye-view.html", "1 terra: a bird’s eye view", " 1 terra: a bird’s eye view The last spatial package you’ll ever need* Rasters and Vectors, with united functions where possible One task, one function Improved speed Very large: 345 functions; raster has 277, sf has 150 Some things changed, many stayed the same Old Packages: sp, raster, rgdal, rgeos, maptools New Packages: terra and geodata (for data) library(microbenchmark) # for speed testing #new packages library(terra) library(geodata) #old packages library(raster) library(rgdal) #table formatting library(data.table) library(kableExtra) options(warn=-1) elev_fn = system.file(&quot;ex/elev.tif&quot;, package=&quot;terra&quot;) lux_fn = system.file(&quot;ex/lux.shp&quot;, package=&quot;terra&quot;) elev = rast(elev_fn) r_elev = raster(elev) lux = vect(lux_fn) sp_lux = shapefile(lux_fn) "],["the-basics.html", "2 The basics 2.1 Reading in data 2.2 Writing data", " 2 The basics 2.1 Reading in data Reading and writing data functionality is based on GDAL, so you will have all the flexibility in your choice of file type that GDAL provides. Operation Data Type Old Functions New Functions read data raster raster, stack, brick rast read data vector shapefile, rgdal::readOGR vect write data raster writeRaster writeRaster write data vector shapefile, rgdal::writeOGR writeVector # reading raster data microbenchmark( rast(elev_fn), raster(elev_fn), times = 100 ) ## Unit: microseconds ## expr min lq mean median uq max neval ## rast(elev_fn) 625.332 650.178 684.5979 672.6665 713.400 808.438 100 ## raster(elev_fn) 6436.385 6537.717 6997.1559 6591.9390 6678.675 21972.474 100 #reading vector data microbenchmark( vect(lux_fn), shapefile(lux_fn), #readOGR(lux_fn), times=100 ) ## Unit: microseconds ## expr min lq mean median uq ## vect(lux_fn) 710.776 747.8605 805.5413 820.615 845.994 ## shapefile(lux_fn) 10051.232 10438.5180 11217.2646 10609.057 10932.363 ## max neval ## 1085.106 100 ## 22478.086 100 2.2 Writing data The function writeRaster() is relatively unchanged, though the argument specifying the type of file written has changed from format (in raster) to filetype (in terra). Additionally, while in theory the function can automatically detect the file type, it seems to rarely work, so it is better to just specify filetype from the get-go. microbenchmark( terra::writeRaster(elev, filename=&#39;data/elevation.GTiff&#39;, filetype=&#39;GTiff&#39;, overwrite=TRUE), raster::writeRaster(r_elev, filename=&#39;data/elevation.GTiff&#39;, format=&#39;GTiff&#39;, overwrite=TRUE), times = 100 ) ## Unit: milliseconds ## expr ## terra::writeRaster(elev, filename = &quot;data/elevation.GTiff&quot;, filetype = &quot;GTiff&quot;, overwrite = TRUE) ## raster::writeRaster(r_elev, filename = &quot;data/elevation.GTiff&quot;, format = &quot;GTiff&quot;, overwrite = TRUE) ## min lq mean median uq max neval ## 2.298214 2.365167 2.669943 2.454076 2.554854 7.568313 100 ## 24.296805 24.686982 27.710795 25.062131 27.778361 153.273990 100 With spatVectors we get writeVector(), which largely mirrors writeRaster(). microbenchmark( writeVector(lux, filename=&#39;data/lux.shp&#39;, overwrite=TRUE), shapefile(sp_lux, filename=&#39;data/lux.shp&#39;, overwrite=TRUE), times = 100 ) ## Unit: microseconds ## expr min ## writeVector(lux, filename = &quot;data/lux.shp&quot;, overwrite = TRUE) 862.804 ## shapefile(sp_lux, filename = &quot;data/lux.shp&quot;, overwrite = TRUE) 3241.378 ## lq mean median uq max neval ## 936.399 1024.630 1002.716 1085.495 1959.964 100 ## 3479.629 3886.207 3587.951 3719.131 11715.299 100 "],["transform.html", "3 Transform", " 3 Transform Operation Data Type Old Functions New Functions add projection all crs(x) &lt;- crs(x) &lt;- change projection raster projectRaster project change projection vector sp::spTransform project change resolution raster resample, aggregate, disaggregate resample, aggregate, disagg spatial subset all crop, intersect, mask crop, intersect, mask spatial subset vector crop, intersect, rgeos::gIntersection, crop, intersect Most of the methods for transforming spatial data remain the same from raster. The exception to that is raster::projectRaster(), which now becomes terra::project() and now works for both rasters and vectors. microbenchmark( terra::project(elev, &quot;epsg:3310&quot;), raster::projectRaster(r_elev, crs=&quot;epsg:3310&quot;), times=10 ) ## Unit: milliseconds ## expr min lq mean ## terra::project(elev, &quot;epsg:3310&quot;) 41.53226 44.37106 47.44512 ## raster::projectRaster(r_elev, crs = &quot;epsg:3310&quot;) 50.15136 55.81207 68.32080 ## median uq max neval ## 44.59381 44.78774 73.03539 10 ## 58.57203 60.36065 117.51600 10 "],["calculate.html", "4 Calculate 4.1 Summary 4.2 Conversion Table", " 4 Calculate 4.1 Summary One of raster’s claims to fame was the ease at which you could do calculations. R automatically treated each cell in a RasterLayer as if it was a number, and each cell in a RasterBrick or RasterStack as if it were a vector. There were additional functions for doing calculations on an entire layer of a raster and for applying non-vectorized functions. 4.2 Conversion Table Operation Data Type Old Functions New Functions raster arithmetic raster +, -, *, / etc. +, -, *, / etc. calculate statistic for a layer in a raster raster cellStats global calculate statistics on a moving window raster focal focal calculate pre-vectorized statistic on each cell across all layers raster sum, mean, max, etc. sum, mean, max etc. apply functions to the values of each cell of a raster raster calc app apply functions using layers as arguments raster calc lapp area covered all area, rgeos::gArea expanse area of raster cell raster area cellSize "],["combine.html", "5 Combine 5.1 Querying", " 5 Combine 5.1 Querying Similar to "],["extents.html", "6 Extents", " 6 Extents "],["what-about-sf-and-stars.html", "7 What about sf (and stars)?", " 7 What about sf (and stars)? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
