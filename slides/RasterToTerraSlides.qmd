---
title: "Raster to Terra"
author: "Elise Hellwig"
format: revealjs
editor: visual
---

# Why Switch?

1.   You have to (older packages are going away)
2.   Other spatial packages are too slow for big data
3.   You don't want to have to load 5 packages when doing geospatial work

## Learning Objectives

- Get a sense for the functionality of the `terra` package as a whole
- Be able to translate existing code from deprecated packages to `terra` syntax
- Know where to find more information about `terra`.


### Prerequisites
Familiarity with the raster and sp packages 

## What we will cover

 - read/write
 - transformations
 - joining
 - calculations
 - get coordinates for spatVector
 - sampling
 - transformation
 - Plotting
 - interpolation
 - data access

# `terra`: A bird's eye view

 - The last spatial package you'll ever need*
 - One class each for rasters, vectors and extents
 - One task, one function
 - Improved speed
 - Very large: 345 functions; raster has 277, sf has 150
 - Some things changed, many stayed the same

## Setup
```{r setup, message=FALSE, warning=FALSE, echo=TRUE}

library(microbenchmark) # for speed testing

#new packages
library(terra) 
library(geodata)

#old packages
library(raster)

#table formatting
library(data.table)
library(kableExtra)

elev_fn = system.file("ex/elev.tif", package="terra")
lux_fn = system.file("ex/lux.shp", package="terra")

elev = rast(elev_fn)
r_elev = raster(elev)

lux = vect(lux_fn)
sp_lux = shapefile(lux_fn)

```
 
 
```{r table_setup, echo=FALSE}

funs = fread('../data/raster_to_terra_funs.csv')

vars = c('Operation', 'DataType', 'old', 'terra')

col_names = c('Operation', 'Data Type', 'Old Functions', 'New Functions')

```

# Read/Write

```{r io_table}

io = funs[OperationGroup=='I/O', ..vars]

io %>% 
  kbl(col.names = col_names) %>% 
  kable_styling()
 
 
 