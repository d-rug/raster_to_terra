---
title: "Raster to Terra"
author: "Elise Hellwig"
format: revealjs
editor: visual
---

## 

![](images/TitleSlide.png)

# Why Switch?

1.  You have to (older packages are going away)
2.  Other spatial packages are too slow
3.  Your data is too large to read into memory
4.  You don't want to have to load 5 packages when doing geospatial work*

## Learning Objectives

-   Get a sense for the functionality of the `terra` package as a whole
-   Be able to translate existing code from deprecated packages to `terra` syntax
-   Know where to find more information about `terra`.

### Prerequisites

Familiarity with the raster and sp packages

## What we will cover

-   Package overview
-   New classes
-   Object creation
-   Method name changes
-   Spatial relationships
-   Calculations
-   Plotting
-   What's not in `terra`
-   Functionality changes

# `terra`: A bird's eye view

-   Raster AND vector support
-   Fewer classes, more functionality
-   One task, one function
-   Written in C++ for improved speed
-   Very large: 345 functions; raster has 277, sf has 150
-   Some things changed, many stayed the same

```{r setup, message=FALSE, warning=FALSE}

library(microbenchmark) # for speed testing

#new packages
library(terra) 

#old packages
library(raster)
library(rgdal)

#table formatting
library(data.table)
library(kableExtra)
library(scales)

options(warn=-1)

elev_fn = system.file("ex/elev.tif", package="terra")
lux_fn = system.file("ex/lux.shp", package="terra")

elev = rast(elev_fn)
r_elev = raster(elev)

lux = vect(lux_fn)
sp_lux = shapefile(lux_fn)

```

```{r microbench_display, echo=FALSE}


time_to_power = function(nano) {
  return(floor(log(nano, 10)))
}


microbench_df = function(mb, labs=NA) {
  
  mb2 <- copy(mb)
  setDT(mb2)
  
  sec_types = rep(c('nano', 'micro','milli', ''), each=3)
  
  n = dim(mb2)[1]/length(levels(mb2$expr))
  
  if (!is.na(labs[1])){
    mb2[,expr:=factor(expr, labels=labs)]
    
  }  
  
  mb_tab = mb2[,.(median=median(time),
                  n_eval=n,
                  id=as.integer(expr)),
               by=expr]
  
  setkey(mb_tab, id)
  
  mb_tab$id <- NULL
  
  unit_pwr = time_to_power(min(mb_tab$median))
  
  num_format = label_comma(accuracy=0.01, scale=10^(-unit_pwr))
  
  mb_tab[,median:=num_format(median)]
  
  setnames(mb_tab, 
           c('expr', 'median'),
           c('function', paste0('median (', sec_types[unit_pwr+1],'sec)'))
           )
  
  return(mb_tab)
  
}

```

```{r table_setup, echo=FALSE}

funs = fread('../raster_to_terra_funs.csv')

vars = c('old', 'terra','Operation')

col_names = c('Old Functions', 'New Function', 'Operation')

n_reps = 100

```

# Classes

![](images/raster_to_terra_classes.png){fig-align="center"}

# Reading and Writing

```{r io_table}

io = funs[OperationGroup=='I/O', ..vars]

io %>% 
  kbl(col.names = col_names) %>% 
  kable_styling()
 
```

## Reading in Data

-   One raster function, regardless of number of layers
-   Vector function reads in more than just shapefiles

```{r read_bench, cache=TRUE}

# reading raster data 

readbench = microbenchmark(
  rast(elev_fn),
  raster(elev_fn),
  vect(lux_fn),
  shapefile(lux_fn),
  readOGR(lux_fn, verbose = FALSE),
  
  times = n_reps
)

read_names = c('terra::rast', 'raster::raster', 'terra::vect', 'raster::shapefile',
               'rgdal::readOGR')

readtab = microbench_df(readbench, read_names)

readtab %>% 
  kbl(align='lrr') %>% 
  kable_styling()  %>% 
  row_spec(c(2,4,5), background = '#dcdcdc')


```

## Writing Data

-   Always specify `filetype`, `terra`'s version of `format` argument

```{r write_bench, cache=TRUE}

# writing data 

writebench = microbenchmark(
  terra::writeRaster(elev,
                     filename='../data/elevation.GTiff',
                     filetype='GTiff', 
                     overwrite=TRUE),
  raster::writeRaster(r_elev,
                      filename='../data//elevation.GTiff',
                      format='GTiff',
                      overwrite=TRUE),
  writeVector(lux, 
              filename='../data/lux.shp', 
              overwrite=TRUE),
  shapefile(sp_lux, 
            filename='../data/lux.shp', 
            overwrite=TRUE),
  writeOGR(sp_lux, 
          dsn='../data/lux.shp', 
          layer='lux',
          driver='ESRI Shapefile',
          overwrite_layer=TRUE,
          verbose=FALSE),
  
  times = n_reps
)

write_names = c('terra::writeRaster', 'raster::writeRaster', 'terra::writeVector',
                'raster::shapefile', 'rgdal::writeOGR')

write_tab = microbench_df(writebench, write_names)

write_tab %>% 
  kbl(align='lrr') %>% 
  kable_styling() %>% 
  row_spec(c(2,4,5), background = '#dcdcdc')



```

# Working with Rasters

::: {style="font-size: 170%;"}
Method names got shorter...

-   `coordinates` $\rightarrow$ `crds`

-   `nlayers` $\rightarrow$ `nlyr`

-   `getValues` $\rightarrow$ `values`
:::

## ...and more similar to base R.

::: {style="font-size: 120%;"}

-   `stack`, `addLayer` $\rightarrow$ `c`

-   `unstack` $\rightarrow$ `as.list`

-   `dropLayer` $\rightarrow$ `subset`

-   `rasterTo*` $\rightarrow$ `as.*`

-   `isLonLat` $\rightarrow$ `is.lonlat`

-   *`bind` $\rightarrow$ `rbind`*

:::

# Different Class, Same Method

::: {style="font-size: 115%;"}
```{r same_name_tab}

comb_tab = funs[OperationGroup=='Combine', c('Operation', 'terra')]

comb_tab %>% 
  kbl(col.names = c('Operation', 'Method')) %>% 
  kable_styling(bootstrap_options = c("striped")) %>% 
  row_spec(c(1,3,5), background = '#c6eec3')

```
:::

## Speed Improvements

```{r transform_bench, cache=TRUE}

r <- rast(nrows=3, ncols=3, xmin=0, xmax=10, ymin=0, ymax=10)
values(r) <- 1:ncell(r)
s <- rast(nrows=25, ncols=30, xmin=1, xmax=11, ymin=-1, ymax=11)

r_r <- raster(r)
s_r <- raster(s)

transbench = microbenchmark(
  terra::spatSample(elev, 100, xy=TRUE),
  raster::sampleRandom(r_elev, 100, xy=TRUE),
  #spsample(sp_lux, 100, 'random'),
  #terra::project(elev, "epsg:3310"),
  #raster::projectRaster(r_elev, crs="epsg:3310"),
  terra::resample(r, s, method='bilinear'),
  raster::resample(r_r, s_r, method='bilinear'),
  terra::rasterize(lux, elev),
  raster::rasterize(sp_lux, r_elev),
  as.polygons(elev),
  rasterToPolygons(r_elev),
  times=n_reps
)

transform_names = c('terra::spatSample', 'raster::sampleRandom',#'spsample',
                    #'terra::project', 'raster::projectRaster',
                    'terra::resample','raster::resample',
                    'terra::rasterize', 'raster::rasterize',
                    'terra::as.polygons', 'raster::rasterToPolygons')

trans_tab = microbench_df(transbench, transform_names)

trans_tab %>% 
  kbl(align='lrr') %>% 
  kable_styling() %>% 
  row_spec(seq(2, 8, 2), background = '#dcdcdc')



```

# Spatial Relationships

::: {style="font-size: 120%;"}
-   `is.related` for a one to one or one to many comparison
-   `relate` for many to many comparison
-   `relation` = intersects, touches, crosses, overlaps, within, contains, covers, covered by, disjoint, or DE-9IM string
:::


# Calculations

::: {style="font-size: 150%;"}
-   Raster [arithmetic](https://rspatial.github.io/terra/reference/arith-generic.html), [mathematical calculations](https://rspatial.github.io/terra/reference/math-generics.html) and [summary stats](https://rspatial.github.io/terra/reference/summarize-generics.html) are still very easy
-   Many name changes
-   More "apply" functions than ever
:::

## Spatial Calculations

::: {style="font-size: 100%;"}
```{r calculate_table, echo=FALSE}

calc_tab = funs[OperationGroup=='Calculate', ..vars]

calc_tab %>% 
  kbl(col.names = col_names) %>% 
  kable_styling()

```
:::

## Common Apply-like Functions

![](images/applyfuns.png)

## Most of the Apply-like Functions

::: {style="font-size: 75%;"}
```{r apply_table, echo=FALSE}

apply_tab = funs[OperationGroup=='Apply', ..vars]

apply_tab %>% 
  kbl(col.names = col_names) %>% 
  kable_styling(bootstrap_options = 'responsive')

```
:::

# `plot` is still `plot`

-   vectors can be added using `points`, `lines` and `polys`
-   `panel` for multi-plot figures
-   `geom_spat*` methods from the [tidyterra package](https://dieghernan.github.io/tidyterra/index.html)
    - use `lyr` to reference raster layers
    - lack of wide-to-long functions for `spatVectors` means faceting with polygons is easier in `sf`

::: {style="font-size: 160%;"}
And there is `plet` for interactive maps!
:::

# What's not included

- Full spatial dependency and spatial regression capabilities

  - `spdep` and `spatialreg` are in the `sf` paradigm

  - Use `sf::st_to_sf(v)` to convert objects and proceed as normal

- `getData()` 
  - New package `geodata`
  - More data with better documentation

## Where's the data? `geodata`!

-   Climate and land cover
-   Elevation and soils
-   Crop distribution and yields
-   Political boundaries
-   Population and human footprint
-   Open Street Map
-   Species occurrence
-   Marine data

# So about C++...

-   `terra` is 64% C++ code as opposed to `raster` which is only 8.5%

-   spat\* cannot be saved from session to session (you shouldn't be doing this anyway)

-   spat\* objects cannot be passed directly to cluster nodes, see [wrap](https://rspatial.github.io/terra/reference/wrap.html) for this.

# Resources

-   [Spatial Data with terra on rspatial.org](https://rspatial.org/spatial/index.html) - How to do spatial data analysis in the context of R and the `terra` package.

-   [terra documentation on rspatial.org](https://rspatial.org/pkg/index.html) - A vignette that walks you through the `terra` package.

-   [terra documentation on github](https://rspatial.github.io/terra/reference/terra-package.html) - An overview of `terra` and a comprehensive description of its classes and methods. Highlights differences between `raster` and `terra`.

-   [geodata documentation on github](https://github.com/rspatial/geodata) - A description of available data as well as some links to the original source.

# Practice!

::: {style="font-size: 120%;"}
https://github.com/d-rug/raster_to_terra#practice
:::